---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Sidebar, {
	type SidebarCategoryData,
	type SidebarHomeLink,
} from "@components/sidebar.astro";
import TableOfContents from "@components/table_of_contents.astro";
import ThemeSwitcher from "@components/theme_switcher.astro";
import BaseLayout from "@layouts/base.astro";
import type { MarkdownHeading } from "astro";

export interface Props {
	document: CollectionEntry<"docs">["data"];
	headings?: MarkdownHeading[];
}

const { document, headings = [] } = Astro.props;

// Get all collections
const [allDocs, allCategories] = await Promise.all([
	getCollection("docs", ({ data }) => !data.draft),
	getCollection("docCategories"),
]);

// Sort docs by order
const sortedDocs = allDocs.sort(
	(a, b) => (a.data.order || 999) - (b.data.order || 999),
);

// Sort categories by order and create a lookup map
const sortedCategories = allCategories.sort(
	(a, b) => a.data.order - b.data.order,
);
const categoryMap = new Map(allCategories.map((cat) => [cat.id, cat]));

// Create properly typed structure for docs organized by category
type DocsByCategory = Map<
	CollectionEntry<"docCategories">["id"],
	Array<{
		title: string;
		slug: string;
		order: number;
	}>
>;

const docsByCategory: DocsByCategory = new Map();

// Initialize categories in order
for (const category of sortedCategories) {
	docsByCategory.set(category.id, []);
}

// Group docs by category and transform to navigation format
for (const doc of sortedDocs) {
	const categoryId = doc.data.category.id;
	const categoryData = docsByCategory.get(categoryId);

	if (categoryData) {
		categoryData.push({
			title: doc.data.title,
			slug: `/docs/${doc.id}`,
			order: doc.data.order || 999,
		});
	} else {
		// Handle docs with categories not in the main categories file
		const category = categoryMap.get(categoryId);
		if (category) {
			docsByCategory.set(categoryId, [
				{
					title: doc.data.title,
					slug: `/docs/${doc.id}`,
					order: doc.data.order || 999,
				},
			]);
		}
	}
}

// Sort docs within each category by order
for (const categoryData of docsByCategory.values()) {
	categoryData.sort((a, b) => a.order - b.order);
}

// Transform to the format expected by the abstracted Sidebar component
const sidebarCategories: SidebarCategoryData[] = sortedCategories
	.map((category) => {
		const items = docsByCategory.get(category.id) || [];
		if (items.length === 0) return null;

		return {
			id: category.id,
			title: category.data.title,
			icon: category.data.icon,
			color: category.data.textColor,
			items: items,
		};
	})
	.filter((category): category is SidebarCategoryData => category !== null);

// Define the home link for documentation
const docHomeLink: SidebarHomeLink = {
	href: "/docs",
	title: "Documentation",
	subtitle: "Home",
	icon: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
		<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
	</svg>`,
};
---

<BaseLayout 
  title={`${document.title} | Hostup Documentation`}
  description={document.description}
>
  <!-- Corner Arrow Buttons -->
  <!-- Sidebar Toggle Button (Bottom Left) -->
  <button
    id="sidebarToggle"
    class="fixed bottom-6 left-6 z-40 bg-surface/95 backdrop-blur-md hover:bg-primary/20 border border-surface-variant/40 rounded-full p-4 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 hover:-translate-x-1 group lg:hidden"
    aria-label="Open navigation menu"
    title="Open navigation"
  >
    <svg class="w-6 h-6 text-on-background group-hover:text-primary transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
    </svg>
  </button>

  <!-- Table of Contents Toggle Button (Bottom Right) -->
  {headings.length > 0 && (
    <button
      id="tocToggle"
      class="fixed bottom-6 right-6 z-40 bg-surface/95 backdrop-blur-md hover:bg-primary/20 border border-surface-variant/40 rounded-full p-4 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 hover:translate-x-1 group xl:hidden"
      aria-label="Open table of contents"
      title="Table of contents"
    >
      <svg class="w-6 h-6 text-on-background group-hover:text-primary transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
  )}

    <!-- Floating Action Buttons (Top Right) -->
  <div class="fixed top-6 right-6 z-50 flex flex-col-reverse xl:flex-row gap-3">
    <!-- Scroll to Top Button -->
    <button
      id="scrollToTopBtn"
      class="bg-surface/90 backdrop-blur-md hover:bg-primary/20 border border-surface-variant/40 rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 group opacity-0 pointer-events-none"
      aria-label="Scroll to top"
      title="Scroll to top"
    >
      <svg class="w-5 h-5 text-on-background group-hover:text-primary transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>

    <!-- Theme Toggle Button (Always available) -->
    <div class="bg-surface/90 backdrop-blur-md border border-surface-variant/40 rounded-full p-1 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110">
      <ThemeSwitcher size="sm" />
    </div>
  </div>

  <!-- Mobile Overlay -->
  <div 
    id="mobileOverlay" 
    class="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 opacity-0 pointer-events-none transition-opacity duration-300 xl:hidden"
  ></div>

  <div class="min-h-screen bg-gradient-to-br from-background via-surface/30 to-surface-variant/20">
    <div class="mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex min-h-screen">
        <!-- Mobile Sidebar -->
        <div 
          id="mobileSidebar"
          class="fixed top-0 left-0 h-full w-80 bg-background z-50 transform -translate-x-full transition-transform duration-300 ease-in-out lg:hidden flex flex-col"
        >
          <div class="flex flex-col h-full p-6">
            <!-- Close Button -->
            <div class="flex justify-between items-center mb-6 flex-shrink-0">
              <h2 class="text-lg font-semibold text-on-background">Navigation</h2>
              <button
                id="closeSidebar"
                class="p-2 hover:bg-surface/60 rounded-lg transition-colors"
                aria-label="Close navigation"
              >
                <svg class="w-5 h-5 text-on-background" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <div id="mobile-sidebar-content" class="flex-1 min-h-0">
              <Sidebar 
                categories={sidebarCategories}
                currentPath={Astro.url.pathname}
                homeLink={docHomeLink}
                context="mobile"
              />
            </div>
          </div>
        </div>

        <!-- Desktop Sidebar Navigation -->
        <div class="hidden lg:block lg:w-80 lg:flex-shrink-0">
          <div class="fixed top-20 left-0 h-[calc(100vh-5rem)] w-80 p-6">
            <div id="desktop-sidebar-content" class="h-full">
              <Sidebar 
                categories={sidebarCategories}
                currentPath={Astro.url.pathname}
                homeLink={docHomeLink}
                context="desktop"
              />
            </div>
          </div>
        </div>

        <!-- Main Content Area -->
        <div class="flex-1 min-w-0">
          <main class="py-12 px-4 sm:px-6 lg:px-8">
            <div class="max-w-4xl mx-auto">
              <!-- Header -->
              <header class="mb-12">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-4">
                  <div class="flex items-center space-x-3 text-sm text-on-background/60">
                    <a href="/docs" class="hover:text-primary transition-colors font-medium">
                      Documentation
                    </a>
                    <div class="w-1 h-1 bg-accent rounded-full"></div>
                    <span class="text-accent font-medium">
                      {(() => {
                        const categoryId = document.category.id;
                        const category = categoryMap.get(categoryId);
                        return category?.data.title || categoryId.replace('-', ' ');
                      })()}
                    </span>
                  </div>
                  {document.lastUpdated && (
                    <div class="text-sm text-on-background/50 bg-surface/60 px-3 py-1.5 rounded-full border border-surface-variant/30 whitespace-nowrap">
                      Updated: {new Date(document.lastUpdated).toLocaleDateString()}
                    </div>
                  )}
                </div>
                
                <div class="space-y-4">
                  <h1 class="text-3xl sm:text-4xl lg:text-5xl font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent leading-tight break-words">
                    {document.title}
                  </h1>
                  <p class="text-lg sm:text-xl text-on-background/70 leading-relaxed">
                    {document.description}
                  </p>
                </div>
              </header>

              <!-- Article Content -->
              <article class="bg-surface/60 backdrop-blur-sm rounded-2xl border border-surface-variant/30 shadow-outer-lg overflow-hidden">
                <div class="prose prose-lg dark:prose-invert max-w-none p-6 sm:p-8 lg:p-12 prose-pre:overflow-x-auto prose-code:break-words">
                  <slot />
                </div>
              </article>

              <!-- Tags and Metadata -->
              <div class="mt-8 flex flex-wrap items-center gap-4">
                {document.tags && document.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {document.tags.map((tag: string) => (
                      <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium bg-primary/10 text-primary border border-primary/20 hover:bg-primary/20 transition-colors">
                        #{tag}
                      </span>
                    ))}
                  </div>
                )}
                
                {document.author && (
                  <div class="flex items-center space-x-2 text-sm text-on-background/60 bg-surface/60 px-3 py-1.5 rounded-full border border-surface-variant/30">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    <span>{document.author}</span>
                  </div>
                )}
              </div>
            </div>
          </main>
        </div>

        <!-- Mobile Table of Contents -->
        {headings.length > 0 && (
          <div 
            id="mobileToc"
            class="fixed top-0 right-0 h-full w-80 bg-background z-50 transform translate-x-full transition-transform duration-300 ease-in-out xl:hidden flex flex-col"
          >
            <div class="flex flex-col h-full p-6">
              <div class="flex justify-between items-center mb-6 flex-shrink-0">
                <h2 class="text-lg font-semibold text-on-background">On this page</h2>
                <button
                  id="closeToc"
                  class="p-2 hover:bg-surface/60 rounded-lg transition-colors"
                  aria-label="Close table of contents"
                >
                  <svg class="w-5 h-5 text-on-background" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              <div id="mobile-toc-content" class="flex-1 min-h-0">
                <TableOfContents headings={headings} context="mobile" />
              </div>
            </div>
          </div>
        )}

        <!-- Desktop Table of Contents (Right Sidebar) -->
        <div class="hidden xl:block xl:w-64 xl:flex-shrink-0">
          <div class="fixed top-20 right-0 h-[calc(100vh-5rem)] w-64 p-6">
            <div id="desktop-toc-content" class="h-full">
              <TableOfContents headings={headings} context="desktop" />
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    function initScrollToTop() {
      const scrollToTopBtn = document.getElementById('scrollToTopBtn');

      // Show/hide button based on scroll position
      function toggleScrollButton() {
        const shouldShow = window.scrollY > 300;
        
        if (scrollToTopBtn) {
          if (shouldShow) {
            scrollToTopBtn.classList.remove('opacity-0', 'pointer-events-none');
            scrollToTopBtn.classList.add('opacity-100');
          } else {
            scrollToTopBtn.classList.add('opacity-0', 'pointer-events-none');
            scrollToTopBtn.classList.remove('opacity-100');
          }
        }
      }

      // Scroll to top functionality
      function scrollToTop() {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      }

      // Event listeners
      window.addEventListener('scroll', toggleScrollButton);
      
      if (scrollToTopBtn) {
        scrollToTopBtn.addEventListener('click', scrollToTop);
      }

      // Initial check
      toggleScrollButton();
    }

    function initMobileMenu() {
      const sidebarToggle = document.getElementById('sidebarToggle');
      const tocToggle = document.getElementById('tocToggle');
      const mobileSidebar = document.getElementById('mobileSidebar');
      const mobileToc = document.getElementById('mobileToc');
      const mobileOverlay = document.getElementById('mobileOverlay');
      const closeSidebar = document.getElementById('closeSidebar');
      const closeToc = document.getElementById('closeToc');

      // Function to close all mobile menus
      function closeAllMenus() {
        if (mobileSidebar) {
          mobileSidebar.classList.add('-translate-x-full');
        }
        if (mobileToc) {
          mobileToc.classList.add('translate-x-full');
        }
        if (mobileOverlay) {
          mobileOverlay.classList.add('opacity-0', 'pointer-events-none');
        }
        document.body.classList.remove('overflow-hidden');
      }

      // Function to open sidebar
      function openSidebar() {
        closeAllMenus();
        setTimeout(() => {
          if (mobileSidebar && mobileOverlay) {
            mobileSidebar.classList.remove('-translate-x-full');
            mobileOverlay.classList.remove('opacity-0', 'pointer-events-none');
            document.body.classList.add('overflow-hidden');
          }
        }, 50);
      }

      // Function to open table of contents
      function openToc() {
        closeAllMenus();
        setTimeout(() => {
          if (mobileToc && mobileOverlay) {
            mobileToc.classList.remove('translate-x-full');
            mobileOverlay.classList.remove('opacity-0', 'pointer-events-none');
            document.body.classList.add('overflow-hidden');
          }
        }, 50);
      }

      // Event listeners
      if (sidebarToggle) {
        sidebarToggle.addEventListener('click', openSidebar);
      }

      if (tocToggle) {
        tocToggle.addEventListener('click', openToc);
      }

      if (closeSidebar) {
        closeSidebar.addEventListener('click', closeAllMenus);
      }

      if (closeToc) {
        closeToc.addEventListener('click', closeAllMenus);
      }

      if (mobileOverlay) {
        mobileOverlay.addEventListener('click', closeAllMenus);
      }

      // Close menu when clicking on navigation links
      const mobileNavLinks = document.querySelectorAll('#mobileSidebar a, #mobileToc a');
      mobileNavLinks.forEach(link => {
        link.addEventListener('click', () => {
          setTimeout(closeAllMenus, 150); // Small delay to allow navigation
        });
      });

      // Handle escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeAllMenus();
        }
      });

      // Handle window resize
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1280) { // xl breakpoint
          closeAllMenus();
        }
      });
    }

    function initSidebarActiveStates() {
      const currentPath = window.location.pathname;
      
      // Handle both mobile and desktop sidebars
      const sidebarContainers = ['#mobile-sidebar-content', '#desktop-sidebar-content'];
      
      sidebarContainers.forEach(containerSelector => {
        const container = document.querySelector(containerSelector);
        if (!container) return;
        
        // Find current page link and expand its category
        const currentLink = container.querySelector(`a[href="${currentPath}"]`);
        if (currentLink) {
          const currentCategory = currentLink.closest('.nav-category');
          if (currentCategory) {
            const content = currentCategory.querySelector('.category-content');
            const arrow = currentCategory.querySelector('.category-arrow') as HTMLElement;
            if (content && arrow) {
              content.classList.remove('hidden');
              arrow.style.transform = 'rotate(180deg)';
            }
          }
        }
      });
    }

    document.addEventListener('astro:page-load', () => {
      initScrollToTop();
      initMobileMenu();
      initSidebarActiveStates();
    });
  </script>
</BaseLayout>
