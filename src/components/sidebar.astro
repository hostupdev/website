---
import ScrollingContainer from "@components/scrolling_container.astro";
import SidebarCategory from "@components/sidebar_category.astro";

export interface SidebarItem {
	title: string;
	slug: string;
	order: number;
}

export interface SidebarCategoryData {
	id: string;
	title: string;
	icon: string;
	color: string;
	items: SidebarItem[];
}

export interface SidebarHomeLink {
	href: string;
	title: string;
	subtitle: string;
	icon: string;
}

export interface Props {
	categories: SidebarCategoryData[];
	currentPath: string;
	homeLink?: SidebarHomeLink;
	context?: string;
}

const { categories, currentPath, homeLink, context = "default" } = Astro.props;
---

<div class="w-full h-full">
  <div class="bg-surface/60 backdrop-blur-sm rounded-2xl border border-surface-variant/30 shadow-outer-lg h-full flex flex-col overflow-hidden">
    <!-- Home Link (Pinned Header) - Optional -->
    {homeLink && (
      <div class="px-6 pt-6 pb-4 border-b border-surface-variant/30 flex-shrink-0">
        <a 
          href={homeLink.href} 
          class={`flex items-center space-x-3 py-3 px-4 rounded-xl transition-all duration-200 group hover:bg-primary/10 ${
            currentPath === homeLink.href ? 'bg-gradient-to-r from-primary/20 to-accent/10 border border-primary/30' : 'hover:scale-105'
          }`}
        >
          <div class="flex items-center justify-center w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-accent text-white flex-shrink-0">
            <Fragment set:html={homeLink.icon} />
          </div>
          <div>
            <h3 class={`text-sm font-semibold ${currentPath === homeLink.href ? 'text-primary' : 'text-on-background group-hover:text-primary'}`}>
              {homeLink.title}
            </h3>
            <p class="text-xs text-on-background/60 group-hover:text-on-background/80">
              {homeLink.subtitle}
            </p>
          </div>
          <svg class="w-4 h-4 text-on-background/40 group-hover:text-primary group-hover:translate-x-1 transition-all duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>
    )}
    
    <!-- Scrollable Categories -->
    <ScrollingContainer containerId={`sidebar-${context}`}>
      <nav class="p-6">
        <div class="space-y-4">
          {categories.map((category) => {
            if (!category.items.length) return null;

            return (
              <SidebarCategory
                category={category.id}
                title={category.title}
                icon={category.icon}
                color={category.color}
                items={category.items}
                currentPath={currentPath}
              />
            );
          })}
        </div>
      </nav>
    </ScrollingContainer>
  </div>
</div>

<script>
  // Smooth scroll for anchor links
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLAnchorElement;
    if (target.href && target.href.includes('#')) {
      const hash = target.href.split('#')[1];
      const element = document.getElementById(hash);
      if (element) {
        e.preventDefault();
        element.scrollIntoView({ behavior: 'smooth' });
      }
    }
  });

  // Handle collapsible sidebar categories
  document.addEventListener('astro:page-load', () => {
    // Add click handlers for category toggles (for both mobile and desktop)
    const categoryToggles = document.querySelectorAll('.category-toggle');
    
          categoryToggles.forEach(toggle => {
        // Remove existing listeners to prevent duplicates
        const newToggle = toggle.cloneNode(true) as HTMLElement;
        toggle.parentNode?.replaceChild(newToggle, toggle);
        
        newToggle.addEventListener('click', () => {
          const categoryDiv = newToggle.closest('.nav-category');
        const content = categoryDiv?.querySelector('.category-content');
        const arrow = categoryDiv?.querySelector('.category-arrow') as HTMLElement;
        
        if (content && arrow) {
          const isHidden = content.classList.contains('hidden');
          
          if (isHidden) {
            content.classList.remove('hidden');
            arrow.style.transform = 'rotate(180deg)';
          } else {
            content.classList.add('hidden');
            arrow.style.transform = 'rotate(0deg)';
          }
        }
      });
    });
  });
</script>
