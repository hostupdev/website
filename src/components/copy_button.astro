---
interface Props {
	text: string;
	size?: "sm" | "md" | "lg";
	className?: string;
}

const { text, size = "md", className = "" } = Astro.props;

// Generate unique IDs for this instance
const buttonId = `copyBtn-${Math.random().toString(36).substr(2, 9)}`;

// Size classes
const sizeClasses = {
	sm: "w-3 h-3",
	md: "w-4 h-4",
	lg: "w-5 h-5",
};
---

<button
  id={buttonId}
  class={`text-primary hover:text-accent transition-colors p-1 rounded hover:bg-surface-variant/30 focus:outline-none focus:ring-2 focus:ring-primary/50 ${className}`}
  title="Copy to clipboard"
  data-copy-text={text}
>
  <svg class={`copy-icon ${sizeClasses[size]}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
  </svg>
  <svg class={`check-icon ${sizeClasses[size]} hidden`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
  </svg>
</button>

<script>
  function initCopyButtons() {
    const copyButtons = document.querySelectorAll('[data-copy-text]');
    
    copyButtons.forEach(button => {
      // Skip if already initialized
      if (button.hasAttribute('data-copy-initialized')) return;
      button.setAttribute('data-copy-initialized', 'true');
      
      button.addEventListener('click', async () => {
        const textToCopy = button.getAttribute('data-copy-text');
        const copyIcon = button.querySelector('.copy-icon');
        const checkIcon = button.querySelector('.check-icon');
        
        if (!textToCopy || !copyIcon || !checkIcon) return;
        
        try {
          await navigator.clipboard.writeText(textToCopy);
          
          // Show success state
          copyIcon.classList.add('hidden');
          checkIcon.classList.remove('hidden');
          button.setAttribute('title', 'Copied!');
          
          // Add success animation
          (button as HTMLElement).style.transform = 'scale(0.95)';
          setTimeout(() => {
            (button as HTMLElement).style.transform = 'scale(1)';
          }, 100);
          
          // Reset after 2 seconds
          setTimeout(() => {
            copyIcon.classList.remove('hidden');
            checkIcon.classList.add('hidden');
            button.setAttribute('title', 'Copy to clipboard');
          }, 2000);
          
        } catch (err) {
          console.error('Failed to copy: ', err);
          
          // Fallback for older browsers
          try {
            const textArea = document.createElement('textarea');
            textArea.value = textToCopy;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            
            // Show success feedback for fallback too
            copyIcon.classList.add('hidden');
            checkIcon.classList.remove('hidden');
            setTimeout(() => {
              copyIcon.classList.remove('hidden');
              checkIcon.classList.add('hidden');
            }, 2000);
          } catch (fallbackErr) {
            console.error('Fallback copy failed: ', fallbackErr);
          }
        }
      });
    });
  }
  
  // Initialize on page load
  document.addEventListener('astro:page-load', initCopyButtons);
  
  // Also initialize immediately in case astro:page-load doesn't fire
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCopyButtons);
  } else {
    initCopyButtons();
  }
</script> 