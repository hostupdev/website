---
interface Props {
	size?: "sm" | "md" | "lg";
}

const { size = "md" } = Astro.props;

// Size-based classes
const sizeClasses = {
	sm: "p-2",
	md: "p-2",
	lg: "p-3",
};

const iconSizeClasses = {
	sm: "w-4 h-4",
	md: "w-5 h-5",
	lg: "w-6 h-6",
};

const buttonClasses = [
	"text-on-background/80 hover:text-primary transition-colors duration-200 rounded-lg",
	"hover:bg-surface-variant/30 focus:outline-none focus:ring-2 focus:ring-primary/50",
	"border border-surface-variant/50",
	sizeClasses[size],
].join(" ");
---

<button
  id="themeSwitcher"
  class={buttonClasses}
  title="Toggle theme"
>
  <!-- Light theme icon -->
  <svg 
    id="lightIcon" 
    class={`${iconSizeClasses[size]} hidden`}
    fill="none" 
    stroke="currentColor" 
    viewBox="0 0 24 24"
  >
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
  </svg>
  
  <!-- Dark theme icon -->
  <svg 
    id="darkIcon" 
    class={`${iconSizeClasses[size]} hidden`}
    fill="none" 
    stroke="currentColor" 
    viewBox="0 0 24 24"
  >
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
  </svg>
  
  <!-- System theme icon -->
  <svg 
    id="systemIcon" 
    class={iconSizeClasses[size]}
    fill="none" 
    stroke="currentColor" 
    viewBox="0 0 24 24"
  >
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
  </svg>
</button>

<script>
import { getTheme, setTheme, initTheme } from "@utilities/theme";

// Extend Window interface for our custom property
declare global {
  interface Window {
    hostupThemeSwitcherInitialized?: boolean;
  }
}

type ThemeMode = "light" | "dark" | "system";

(function() {
  // Prevent multiple initialization
  if (window.hostupThemeSwitcherInitialized) return;
  window.hostupThemeSwitcherInitialized = true;
  
  let currentThemeIndex = 0;
  const themes: ThemeMode[] = ["system", "light", "dark"];
  
  function updateIconDisplay() {
    const theme = themes[currentThemeIndex];
    
    // Update all theme switcher instances on the page
    const allSwitchers = document.querySelectorAll('[id="themeSwitcher"]');
    allSwitchers.forEach(switcher => {
      const lightIcon = switcher.querySelector('[id="lightIcon"]');
      const darkIcon = switcher.querySelector('[id="darkIcon"]');
      const systemIcon = switcher.querySelector('[id="systemIcon"]');
      
      // Hide all icons
      if (lightIcon) lightIcon.classList.add("hidden");
      if (darkIcon) darkIcon.classList.add("hidden");
      if (systemIcon) systemIcon.classList.add("hidden");
      
      // Show the appropriate icon
      switch (theme) {
        case "light":
          if (lightIcon) lightIcon.classList.remove("hidden");
          break;
        case "dark":
          if (darkIcon) darkIcon.classList.remove("hidden");
          break;
        case "system":
          if (systemIcon) systemIcon.classList.remove("hidden");
          break;
      }
    });
  }
  
  function initThemeSwitcher() {
    // Initialize the theme system (this handles system preference listeners)
    initTheme();
    
    // Get current theme and update UI
    const currentTheme = getTheme();
    currentThemeIndex = themes.indexOf(currentTheme);
    if (currentThemeIndex === -1) currentThemeIndex = 0;
    
    updateIconDisplay();
    
    // Add click handlers to all theme switcher buttons
    const allSwitchers = document.querySelectorAll('[id="themeSwitcher"]');
    allSwitchers.forEach(switcher => {
      if (!switcher.hasAttribute("data-theme-handler")) {
        switcher.setAttribute("data-theme-handler", "true");
        
        switcher.addEventListener("click", function(this: HTMLElement) {
          currentThemeIndex = (currentThemeIndex + 1) % themes.length;
          const newTheme = themes[currentThemeIndex];
          
          // Use the theme utility to set the theme
          setTheme(newTheme);
          updateIconDisplay();
          
          // Animation feedback
          this.style.transform = "scale(0.9)";
          setTimeout(() => {
            this.style.transform = "scale(1)";
          }, 100);
        });
      }
    });
  }

  // Handle Astro page loads
  document.addEventListener("astro:page-load", initThemeSwitcher);
})();
</script> 