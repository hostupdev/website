---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import ActionButton from "@components/action_button.astro";
import CategoryCard from "@components/category_card.astro";
import CategorySection from "@components/category_section.astro";
import DocCard from "@components/doc_card.astro";
import MainLayout from "@layouts/main.astro";
import UnderConstruction from "@pages/under-construction.astro";

// Get all collections
const [allDocs, allCategories] = await Promise.all([
	getCollection("docs", ({ data }) => !data.draft),
	getCollection("docCategories"),
]);

// Sort docs by order
const sortedDocs = allDocs.sort(
	(a, b) => (a.data.order || 999) - (b.data.order || 999),
);

// Sort categories by order and create a lookup map
const sortedCategories = allCategories.sort(
	(a, b) => a.data.order - b.data.order,
);
const categoryMap = new Map(allCategories.map((cat) => [cat.id, cat]));

// Create properly typed structure for docs organized by category
const docsByCategory: Map<
	CollectionEntry<"docCategories">["id"],
	CollectionEntry<"docs">[]
> = new Map();

// Initialize categories in order
for (const category of sortedCategories) {
	docsByCategory.set(category.id, []);
}

// Group docs by category
for (const doc of sortedDocs) {
	const categoryId = doc.data.category.id;
	const categoryData = docsByCategory.get(categoryId);

	if (categoryData) {
		categoryData.push(doc);
	} else {
		// Handle docs with categories not in the main categories file
		const category = categoryMap.get(categoryId);
		if (category) {
			docsByCategory.set(categoryId, [doc]);
		}
	}
}

// Sort docs within each category by order
for (const categoryData of docsByCategory.values()) {
	categoryData.sort((a, b) => (a.data.order || 999) - (b.data.order || 999));
}

// Filter out empty categories for cleaner rendering
const categoriesWithDocs = Array.from(docsByCategory.entries()).filter(
	([, categoryData]) => categoryData.length > 0,
);
---

{sortedDocs.length === 0 ? (
  <UnderConstruction 
    title="Documentation Under Development"
    description="We're working hard to bring you a comprehensive documentation experience. Check back soon!"
    backLink="/"
    backText="Back to Home"
  />
) : <MainLayout 
  title="Hostup Documentation"
  description="Comprehensive documentation to help you get the most out of our platform"
>
  <div class="min-h-screen bg-gradient-to-br from-background via-surface/30 to-surface-variant/20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-32">
      <!-- Hero Header -->
      <div class="text-center mb-20">
        <div class="space-y-6">
          <h1 class="text-5xl lg:text-6xl font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent leading-tight">
            Documentation
          </h1>
          <p class="text-xl lg:text-2xl text-on-background/80 max-w-4xl mx-auto leading-relaxed">
            Your complete guide to mastering Hostup and making the most of its features.
          </p>
        </div>
      </div>

      <!-- Quick Start Hero Card -->
      <div class="mb-20">
        <div class="bg-gradient-to-br from-primary via-accent to-secondary rounded-3xl p-8 lg:p-12 text-white shadow-outer-lg relative overflow-hidden">
          <!-- Background decoration -->
          <div class="absolute top-0 right-0 w-1/3 h-full bg-gradient-to-l from-white/10 to-transparent rounded-3xl"></div>
          <div class="absolute -top-20 -right-20 w-40 h-40 bg-white/5 rounded-full"></div>
          <div class="absolute -bottom-10 -left-10 w-32 h-32 bg-white/5 rounded-full"></div>
          
          <div class="relative z-10 max-w-4xl">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center backdrop-blur-sm border border-white/30">
                <span class="text-2xl">ðŸš€</span>
              </div>
              <h2 class="text-3xl font-semibold">Quick Start</h2>
            </div>
            <p class="text-white/90 mb-8 text-lg lg:text-xl leading-relaxed">
              New to Hostup? Get up and running in minutes with our comprehensive step-by-step guide.
            </p>
            <div class="flex flex-col sm:flex-row gap-4">
              <ActionButton href="/docs/getting-started/introduction" variant="outline" size="lg" class="bg-white/10 border-white/30 text-white hover:bg-white/25 hover:border-white/50 hover:text-white backdrop-blur-sm">
                Start Here â†’
              </ActionButton>
              <ActionButton href="/docs/getting-started/setup" variant="outline" size="lg" class="bg-white/10 border-white/30 text-white hover:bg-white/25 hover:border-white/50 hover:text-white backdrop-blur-sm">
                Setup Guide
              </ActionButton>
            </div>
          </div>
        </div>
      </div>

      <!-- Documentation Categories -->
      <div class="mb-20">
        <h2 class="text-3xl font-semibold text-on-background mb-12 text-center">
          Explore Documentation
        </h2>
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {categoriesWithDocs.map(([categoryKey, categoryData]) => {
            const category = categoryMap.get(categoryKey);
            if (!category) return null;
            
            return (
              <CategoryCard 
                category={category} 
                docs={categoryData} 
                categoryKey={categoryKey} 
                maxDocsShown={3} 
              />
            );
          })}
        </div>
      </div>

      <!-- Recent Updates -->
      <div class="mb-20">
        <h2 class="text-3xl font-semibold text-on-background mb-12 text-center">
          Recently Updated
        </h2>
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {(() => {
            const recentDocs = sortedDocs
              .filter(doc => doc.data.lastUpdated)
              .sort((a, b) => new Date(b.data.lastUpdated!).getTime() - new Date(a.data.lastUpdated!).getTime());
            
            const displayDocs = recentDocs.length >= 6 
              ? recentDocs.slice(0, 6)
              : [...recentDocs, ...sortedDocs.filter(doc => !doc.data.lastUpdated)].slice(0, 6);
            
            return displayDocs.map(doc => {
            const category = categoryMap.get(doc.data.category.id);
            if (!category) return null;

            return (
              <DocCard 
                doc={doc} 
                category={category} 
                variant="recent" 
                showLastUpdated={true} 
              />
            );
          });
          })()}
        </div>
      </div>

      <!-- All Documentation by Category -->
      <div class="mb-20">
        <h2 class="text-3xl font-semibold text-on-background mb-12 text-center">
          Browse All Documentation
        </h2>
        <div class="space-y-12">
          {categoriesWithDocs.map(([categoryKey, categoryData]) => {
            const category = categoryMap.get(categoryKey);
            if (!category) return null;

            return (
              <CategorySection 
                category={category} 
                docs={categoryData} 
                categoryKey={categoryKey} 
              />
            );
          })}
        </div>
      </div>
    </div>
  </div>
</MainLayout>
}
